// This library handles the low level socket work for sending web requests 
// and allows and easy interface for sending data over the web 

import "lib/json"
import "lib/_socket"
import "lib/_ssocket"

var unsecure_newSocket = _socket.query("newSocket")
var unsecure_closeSocket = _socket.query("closeSocket")
var unsecure_readSocket = _socket.query("readSocket")
var unsecure_writeSocket = _socket.query("writeSocket")

var secure_newSocket = _ssocket.query("newSocket")
var secure_closeSocket = _ssocket.query("closeSocket")
var secure_readSocket = _ssocket.query("readSocket")
var secure_writeSocket = _ssocket.query("writeSocket")

global CONN_MODE = {
    "SECURE" = 0,
    "UNSECURE" = 1
}

class HTTPResponse:
    // This class is a container for an http response 

    func _init(statusCode, message, headers, body):
        self.statusCode = statusCode 
        self.message = message 
        self.headers = headers 
        self.body = body 
    end 

    func print():
        print("Status Code :", self.statusCode)
        print("Message : ", self.message)
        print("Headers : ", self.headers)
        print("Body :", self.body)
    end 
end 

global class Socket:
    ready = false 

    func _init(host, port, ctype): 
        self.lib = {}

        if ctype == CONN_MODE.SECURE:
            self.lib.newSocket = secure_newSocket
            self.lib.closeSocket = secure_closeSocket
            self.lib.readSocket = secure_readSocket
            self.lib.writeSocket = secure_writeSocket
        elseif ctype == CONN_MODE.UNSECURE:
            self.lib.newSocket = unsecure_newSocket
            self.lib.closeSocket = unsecure_closeSocket
            self.lib.readSocket = unsecure_readSocket
            self.lib.writeSocket = unsecure_writeSocket
        else:
            print("Unknown Connection Mode")
            return
        end 
        
        self._socket = self.lib.newSocket(host, port)
         
        self.host = host
        self.port = port 
        self.ready = true
    end

    func close():
        if !self.ready: return end 

        self.ready = false 
        self.lib.closeSocket(self._socket)
        self._socket = nil
        return true 
    end 

    func send(data):
        if !self.ready: return end 
        self.lib.writeSocket(self._socket, data)

        return true 
    end

    func recv():
        if !self.ready: return end
        var readFunction = self.lib.readSocket 
        
        var read 
        
        while true:
            var r = readFunction(self._socket)
            if #r < 1300 or !r:
                if !read: return r end 
                return read
            end

            if !read: read = "" end
            read += r
        end
    end 

    func parseHTTPResponse(response):
        if !self.ready: return end
        var wholeSplitted = response.split("\r\n\r\n")
        var body 
        if #wholeSplitted < 2:
            body = ""
            
        else:
            body = wholeSplitted[1]
        end 

        var splitted = wholeSplitted[0].split("\r\n")
    
        var message = ""
        var statusCode = -1 
        var headers = {}

        if #splitted < 1:
            print("Expected Message in response")
            return 
        end

        // first part the message 
        var messageSplitted = splitted[0].split(" ")
        if #messageSplitted < 3:
            print("Wrong message format")
            return 
        end 

        statusCode = num(messageSplitted[1])
        if statusCode == nil:
            print("Invalid Status code")
            return 
        end
        message = messageSplitted[2]

        for i in 3, #messageSplitted - 1:
            message += " " + messageSplitted[i]
        end 
        
        for i in 1, #splitted - 1:
            var header = splitted[i]
            var headerSplitted = header.split(": ")
            
            if #headerSplitted < 1:
                print("Invalid Header Format")
                return 
            end 

            var key = headerSplitted[0] 
            var value = ""

            for i in 1, #headerSplitted - 1:
                value += headerSplitted[i]
            end

            headers[key] = value 
        end

        return HTTPResponse(statusCode, message, headers, body)
    end

    func get(endpoint, headers):
        if !self.ready: return end 
        if type(endpoint) != "string":
            print("Endpoint should be a string")
            return 
        end 
        
        if type(headers) != "table":
            headers = {} 
        end 

        if !headers.Host:
            headers.Host = self.host
        end 

        var message = "GET " + endpoint + " HTTP/1.0\r\n"

        for _, key in headers.keys():
            var value = headers[key]

            message += key 
            message += ": "
            message += str(value)
            message += "\r\n"
        end

        message += "\r\n"
        if !self.send(message): 
            print("An Error Occured While Sending Data Over Socket")
            return
        end
        var res = self.recv()
        if !res:
            print("An Error Occured while reading data from socket")
            return
        end
        return self.parseHTTPResponse(res)
    end

    func post(endpoint, headers, body):
        if !self.ready: return end 

        if type(endpoint) != "string":
            print("Endpoint is expected to be a string")
            return 
        end 

        if type(headers) != "table":
            print("Headers are expected to be a string")
            return 
        end 

        if type(body) != "string":
            print("Body is expected to be a string")
            return 
        end 

        if !headers["Content-Type"]:
            headers["Content-Type"] = "text/plain"
        end 

        if !headers["Content-Length"]:
            headers["Content-Length"] = #body
        end 

        var message = "POST " + endpoint + " HTTP/1.0\r\n"

        for _, key in headers.keys():
            var value = headers[key] 

            message += key
            message += ": "
            message += str(value)
            message += "\r\n"
        end 

        message += "\r\n"
        message += body

        if !self.send(message): return end 
        var res = self.recv()
        if !res: return end 
        return self.parseHTTPResponse(res) 
    end 
end
